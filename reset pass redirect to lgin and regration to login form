in regostercontroller.php
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class RegisterController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    // protected $redirectTo = '/home';
    protected $redirectTo = '/loginForm';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'string', 'min:8', 'confirmed'],
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return \App\Models\User
     */
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
        ]);
    }
    /**
     * The user has been successfully registered.
     * Log the user out and redirect to login page.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\User  $user
     * @return \Illuminate\Http\RedirectResponse
     */
    protected function registered(Request $request, $user)
    {
        // Logout the user immediately after registration
        Auth::logout();

        // Redirect to login form with a success message
        return redirect()->route('loginForm')->with('status', 'Registration successful! Please login.');
    }
}

***************************** in ResetPasswordController ****************************
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ResetsPasswords;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Password;
class ResetPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset requests
    | and uses a simple trait to include this behavior. You're free to
    | explore this trait and override any methods you wish to tweak.
    |
    */

    use ResetsPasswords;

    /**
     * Where to redirect users after resetting their password.
     *
     * @var string
     */
    // protected $redirectTo = '/home';

    

protected function sendResetResponse(Request $request, $response)
{
    // Logout the user immediately after password reset
    Auth::logout();

    // Redirect to login form with success message
    return redirect()->route('loginForm')->with('status', trans($response));
}

}


*********LoginCustomController***********
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;

class LoginCustomController extends Controller
{
    // login form
    public function loginForm(){
        return view('auth.login');
    }

    // logged in user
    public function loginUser(Request $request)
    {

        $request->validate([
        'email'=>'required',
        'password'=>'required',
        ]);
        $credentials = $request->only('email', 'password');
        $remember = $request->filled('remember');
    
        if (Auth::attempt($credentials, $remember)) {
            return redirect()->route('admin.dashboard');
        }
    
        $user = User::where('email', $credentials['email'])->first();
    
        if ($user) {
            return back()->with('passwordError', 'The password you entered is incorrect.')->withInput();
        } else {
            return back()->with('emailError', 'No account found with this email address.')->withInput();
        }
    }
    
    
       // logout
       function logoutUser()
       {
           // if(session('email')){
           //     session()->flush();
           // }
           Auth::logout();
           return redirect()->route('loginForm');
       }

}
